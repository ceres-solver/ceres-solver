{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "44642e56_35f1000f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-04-24T23:34:50Z",
      "side": 1,
      "message": "I would stay away from unicode for now.\n\nWe have stuck to using pseudo-latex notation for now.\n\nSameer",
      "tag": "mailMessageId\u003d\u003cCABqdRUC-Pmv-jPv\u003dwgOsg96k00SvD__J4xt7m0benw04\u003dtohpQ@mail.gmail.com\u003e",
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f045221c_4c4c3e2f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 6297
      },
      "writtenOn": "2022-05-04T02:09:52Z",
      "side": 1,
      "message": "Hi Sameer, thank you for the comments. I can address them and others, but first I wanted to discuss one issue here, which is related to the Jacobian.\n\nThe cost function for the marginalization prior is (an affine function of) Minus(x, y), where y is the linearization point used in marginalization. The Jacobian would involve the derivative of Minus(x, y) wrt x at an arbitrary x. However, Manifold\u0027s MinusJacobian provides the derivative at y only. I do not think there is a generic way to compute this derivative in terms of the other functions in Manifold. Is this right?",
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59e6af45_2203def1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-05-07T01:16:58Z",
      "side": 1,
      "message": "You are right, Minus Jacobian computes D_2 Minus(x,x). So no, the Manifold API does not provide a generic way computing this derivative :/",
      "parentUuid": "f045221c_4c4c3e2f",
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1acc245d_4270493c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 6190
      },
      "writtenOn": "2022-05-11T13:23:08Z",
      "side": 1,
      "message": "Sameer, might it make sense to extend the Manifold API for this additional Jacobian? One could provide a default implementation in the base class that just raises a (descriptive) \"not implemented\" runtime error, such that users that don\u0027t need this functionality (marginalization), don\u0027t have provide an (empty) implementation in their manifold classes. (The same argument for providing a default implementation could also be made for the existing Minus and MinusJacobian functions.)",
      "parentUuid": "59e6af45_2203def1",
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f18c6c0_12eaa7f8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 6190
      },
      "writtenOn": "2022-05-11T13:23:08Z",
      "side": 1,
      "message": "Thanks Evan! I haven\u0027t looked at the code yet, but see my replies to some of the comments. The MinusJacobian limitation is a bummer, I also didn\u0027t notice before...",
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7de180a4_7c605cad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-05-18T13:33:34Z",
      "side": 1,
      "message": "I think this would require a fundamental change to the API, because we have two functions that compute specific derivatives, and now we are a more general derivative which is not used in the common case. Adding one more derivative function is going to make this API tricky. \n\nWe have not done the \"default implementation is not available\" thing in the API either. It makes the API unpredictable, where now some objects are only partially defined.\n\nSo, I\u0027d like to think about this some more. Is there another way to achieve the same thing?",
      "parentUuid": "1acc245d_4270493c",
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ee966bf_fea978ef",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 6297
      },
      "writtenOn": "2022-05-20T02:42:53Z",
      "side": 1,
      "message": "One way I see to achieve this are to have every parameterization (manifold) involved implement some separate interface that extends the Manifold API. Somehow, we would have to provide this extra function. There are probably alternatives to the interface approach.\n\nIn reality, the extra factors in the Jacobian introduced by the minus here are very close to identity, so it is tempting to neglect them. Along these lines, another completely different approach would be to formulate this differently where the tangent space has to be fixed for the variables in the Markov blanket after marginalization. I have not thought through the feasibility of that one, and it is probably not ideal as the default behavior for a generic implementation.",
      "parentUuid": "7de180a4_7c605cad",
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01474fbe_c586125a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 6190
      },
      "writtenOn": "2022-05-23T10:13:24Z",
      "side": 1,
      "message": "Yeah, I agree this is tricky in terms of API and I don\u0027t really have a good suggestion :-|\n\nHaving some Manifold classes implement a second API is kind of the same as just extending the Manifold API with optional elements.\n\nOptional API functions could also be made more explicit, for example by having some sort of \"capability\" flags, where each Manifold class can (has to) explicitly state which functionality is supported. Then Ceres can make some decisions based on which capabilities the manifolds of the current Problem have. And it\u0027s more explicit and maybe less surprising (compared to just default-implementing virtual methods with a throwing implementation). But still doesn\u0027t feel very nice.\n\nThe Jacobian to be ignored will be close to identity only if the current state and the linearization points are close. Maybe in practice for well-behaved problems this is anyway the case. But I have no experience on how much of a difference it makes for the optimization result of practical problems.\n\nWhat is the current MinusJacobian (at (x,x)) envisioned to be used for? So far it\u0027s unused, I believe. Possibly, one could also argue that it is not needed in the common case (unless you plan to make use of it in some core part of Ceres). At the same time, I think it\u0027s quite feasible that in the future some new feature might want to extend the Manifold API again (e.g.---just a random example---with a PlusJacobian at a general x, not just 0). So if the API is extended now, it would probably be good to do it in a way that is extensible in the future without breaking API.",
      "parentUuid": "2ee966bf_fea978ef",
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f2e311c_de4fb3a3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-05-23T19:29:13Z",
      "side": 1,
      "message": "Nikolaus,\n\nYou raise some good points. Let me look at the API changes needed. I have a bit of a messy week, so I won\u0027t be able to look at this before next week.\n\nSameer",
      "tag": "mailMessageId\u003d\u003cCABqdRUBJExH2WZio\u003dx9Ofi8QOsd7FhaygYG-XRhQMx3j7U\u003d1Cw@mail.gmail.com\u003e",
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "051ce9f8_004a3fb9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 6197
      },
      "writtenOn": "2022-12-13T10:16:01Z",
      "side": 1,
      "message": "Dear Sameer, it is would be really nice to extend manifold API to also solve the issue in this thread https://groups.google.com/g/ceres-solver/c/fLONN_E9c88\n\nSorry for out of topic.",
      "parentUuid": "4f2e311c_de4fb3a3",
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f039401f_aeaeeb99",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 5010
      },
      "writtenOn": "2022-12-13T15:47:59Z",
      "side": 1,
      "message": "These two issues are unrelated. The one you are talking about has to do with the CostFunction API.",
      "tag": "mailMessageId\u003d\u003cCAK0oyEq\u003dVtu4_0EniWgNy9_DikhMGqu8g2+E7Cnmfp4C02eqBQ@mail.gmail.com\u003e",
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b72e0b4_a1a134ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 4123354
      },
      "writtenOn": "2025-06-03T13:52:01Z",
      "side": 1,
      "message": "Hello,\nI came across this change, and noticed it hasn\u0027t seen updates in a while, is there any plan to push it forward? I think it would be very useful! I\u0027d be happy to help if needed/possible.\nThanks,\nJb",
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7b357d74_3934ae65",
        "filename": "include/ceres/marginalization.h",
        "patchSetId": 11
      },
      "lineNbr": 67,
      "author": {
        "id": 6297
      },
      "writtenOn": "2022-04-24T22:40:23Z",
      "side": 1,
      "message": "Unicode ok?",
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "275a28b2_7bd1c501",
        "filename": "include/ceres/marginalization.h",
        "patchSetId": 11
      },
      "lineNbr": 67,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-05-01T19:12:18Z",
      "side": 1,
      "message": "I would stay away from unique for now.",
      "parentUuid": "7b357d74_3934ae65",
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "340e32f3_72d60bbf",
        "filename": "internal/ceres/marginalization.cc",
        "patchSetId": 11
      },
      "lineNbr": 136,
      "author": {
        "id": 6297
      },
      "writtenOn": "2022-04-24T22:39:45Z",
      "side": 1,
      "message": "I introduced code to make a copy of the linearization state so that it can be const. The linearization state is only used for evaluation, so an alternative would be to const_cast the linearization_state, but I think the copy is cheap and the better option. Let me know if folks have other opinions.",
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd693b53_5a22ba85",
        "filename": "internal/ceres/marginalization.cc",
        "patchSetId": 11
      },
      "lineNbr": 136,
      "author": {
        "id": 6190
      },
      "writtenOn": "2022-05-11T13:23:08Z",
      "side": 1,
      "message": "Wait, why would we need a const_cast to go from not-const to const? Shouldn\u0027t it only be needed for the other way round?\n\nBut in any case, I think a copy of the linearization state is needed, b/c otherwise the passed parameters are not guaranteed to not be changed by someone outside the marginalization prior later. Or maybe that\u0027s what you meant?",
      "parentUuid": "340e32f3_72d60bbf",
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc51c900_6fee5b8b",
        "filename": "internal/ceres/marginalization_prior_cost_function.h",
        "patchSetId": 11
      },
      "lineNbr": 3,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-05-01T19:20:39Z",
      "side": 1,
      "message": "I suggest sending this file (and its tests) out for a review on its own first, since it doesn\u0027t really depend on the rest of the CL.\n\nAlso split this into a marginalization_prior_cost_function.h/.cc putting the implementation in the cc file.",
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a83aa02_5ef78866",
        "filename": "internal/ceres/marginalization_prior_cost_function.h",
        "patchSetId": 11
      },
      "lineNbr": 14,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-05-01T19:20:39Z",
      "side": 1,
      "message": "expand this documentation.",
      "range": {
        "startLine": 14,
        "startChar": 30,
        "endLine": 14,
        "endChar": 31
      },
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5fa77ce6_6e9a9f2a",
        "filename": "internal/ceres/marginalization_prior_cost_function.h",
        "patchSetId": 11
      },
      "lineNbr": 18,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-05-01T19:20:39Z",
      "side": 1,
      "message": "document the constructor.",
      "range": {
        "startLine": 18,
        "startChar": 2,
        "endLine": 18,
        "endChar": 34
      },
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87daf2f3_16c31507",
        "filename": "internal/ceres/marginalization_prior_cost_function.h",
        "patchSetId": 11
      },
      "lineNbr": 22,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-05-01T19:20:39Z",
      "side": 1,
      "message": "is it one point or more? if you just say x0 then it appears you are dealing with one point, but that does not seem to be the case.",
      "range": {
        "startLine": 22,
        "startChar": 51,
        "endLine": 22,
        "endChar": 53
      },
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b35e563b_d125cd4c",
        "filename": "internal/ceres/marginalization_prior_cost_function.h",
        "patchSetId": 11
      },
      "lineNbr": 44,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-05-01T19:20:39Z",
      "side": 1,
      "message": "are the tangent sizes the same as the tangent size of the manifolds? if so why do you need a separate array?\n\nif not then its worth explaining in the documentation as to what is going on.",
      "range": {
        "startLine": 44,
        "startChar": 24,
        "endLine": 44,
        "endChar": 49
      },
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aea7e2af_73c3ba52",
        "filename": "internal/ceres/marginalization_prior_cost_function.h",
        "patchSetId": 11
      },
      "lineNbr": 87,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-05-01T19:20:39Z",
      "side": 1,
      "message": "these matrix allocations inside the loop can get expensive, maybe it won\u0027t matter since there are so few of them, but something worth thinking about in the future.",
      "range": {
        "startLine": 87,
        "startChar": 13,
        "endLine": 87,
        "endChar": 27
      },
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b736aa7_90274e24",
        "filename": "internal/ceres/marginalization_prior_cost_function.h",
        "patchSetId": 11
      },
      "lineNbr": 96,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-05-01T19:20:39Z",
      "side": 1,
      "message": "why assign to a temporary which will cause a matrix allocation, why not just assign it below in the expression?",
      "range": {
        "startLine": 96,
        "startChar": 12,
        "endLine": 96,
        "endChar": 18
      },
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ff54832_7edc864b",
        "filename": "internal/ceres/marginalization_prior_cost_function.h",
        "patchSetId": 11
      },
      "lineNbr": 96,
      "author": {
        "id": 6297
      },
      "writtenOn": "2022-05-04T02:09:52Z",
      "side": 1,
      "message": "Thanks; missed this",
      "parentUuid": "4b736aa7_90274e24",
      "range": {
        "startLine": 96,
        "startChar": 12,
        "endLine": 96,
        "endChar": 18
      },
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a755aaba_aabe87a2",
        "filename": "internal/ceres/marginalization_prior_cost_function.h",
        "patchSetId": 11
      },
      "lineNbr": 104,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-05-01T19:20:39Z",
      "side": 1,
      "message": "this is a bit cryptic. who uses this function and for what?",
      "range": {
        "startLine": 104,
        "startChar": 63,
        "endLine": 104,
        "endChar": 72
      },
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1abdc692_f6143f8c",
        "filename": "internal/ceres/marginalization_prior_cost_function.h",
        "patchSetId": 11
      },
      "lineNbr": 105,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-05-01T19:20:39Z",
      "side": 1,
      "message": "just b() should do. also why not return a const reference?",
      "range": {
        "startLine": 105,
        "startChar": 9,
        "endLine": 105,
        "endChar": 13
      },
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa6b672f_f78c6b1f",
        "filename": "internal/ceres/marginalization_prior_cost_function.h",
        "patchSetId": 11
      },
      "lineNbr": 105,
      "author": {
        "id": 6297
      },
      "writtenOn": "2022-05-04T02:09:52Z",
      "side": 1,
      "message": "Oops, forgot the const ref. b sounds good",
      "parentUuid": "1abdc692_f6143f8c",
      "range": {
        "startLine": 105,
        "startChar": 9,
        "endLine": 105,
        "endChar": 13
      },
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ccb25fb_cbdbf2f2",
        "filename": "internal/ceres/marginalization_prior_cost_function.h",
        "patchSetId": 11
      },
      "lineNbr": 108,
      "author": {
        "id": 5002
      },
      "writtenOn": "2022-05-01T19:20:39Z",
      "side": 1,
      "message": "the words parameter_block as a suffix is not particularly useful since it is used everywhere, it just makes things longer. How about\n\n\ntangent_sizes_\nmanifolds_\nreference_points_\n\nalso why do you need tangent_sizes when you have the manifolds available?",
      "range": {
        "startLine": 108,
        "startChar": 19,
        "endLine": 108,
        "endChar": 45
      },
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07ab4d35_c56cdd10",
        "filename": "internal/ceres/marginalization_prior_cost_function.h",
        "patchSetId": 11
      },
      "lineNbr": 108,
      "author": {
        "id": 6297
      },
      "writtenOn": "2022-05-04T02:09:52Z",
      "side": 1,
      "message": "Sounds good. You are right-- I originally thought about handling the case that the manifolds are nullptr, but I can get the tangent space size from the reference point to handle that case.",
      "parentUuid": "4ccb25fb_cbdbf2f2",
      "range": {
        "startLine": 108,
        "startChar": 19,
        "endLine": 108,
        "endChar": 45
      },
      "revId": "d7e76c913562bbe531755358a0fa579cabad1f5c",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}