{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "dfdb540c_5eb1360d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2025-05-17T14:44:40Z",
      "side": 1,
      "message": "Hi Sergiu,\nI realized that I was typing the same comment over and over again, so I figured I would just ask here, why use fp_classify when testing for zero? why not just check equality against zero?",
      "revId": "f967d34d86bd1b85962a32e70cf362b599f8abe4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5534f881_84faeb98",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2025-05-17T17:05:31Z",
      "side": 1,
      "message": "Hi Sameer,\n\nThe reason I prefer using `std::fpclassify` over usal comparison is that compilers issue warnings ([Godbolt example](https://godbolt.org/z/M9cnznef6)) when comparing floating point values for equality even when the intention is to examine the exact representation of a floating point value. In the end, this will allow use compiling Ceres with more stricter checks by reducing the number bogus warnings.",
      "parentUuid": "dfdb540c_5eb1360d",
      "revId": "f967d34d86bd1b85962a32e70cf362b599f8abe4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5673677b_404d1325",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5002
      },
      "writtenOn": "2025-05-18T15:24:02Z",
      "side": 1,
      "message": "I looked at the documentation for this warning\n\nhttps://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html#index-Wfloat-equal\n\nI think this is a misguided feature, because the thing it is asking for (comparisons based on perturbation analysis) is hard to do for most non-trivial computations. \n\nFurther for our cases, the specific case we are comparing is not the result of a computation per se, but rather we are trying to actually avoid a division by zero because the formulae we are using break down.\n\nI do not think we should enable this warning for our code base. Further the fpclassify turns what is a simple equality comparison into a library call, which does not sound right to me.",
      "parentUuid": "5534f881_84faeb98",
      "revId": "f967d34d86bd1b85962a32e70cf362b599f8abe4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f57c74f_50a6ad0e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6612
      },
      "writtenOn": "2025-05-18T16:09:30Z",
      "side": 1,
      "message": "The library call is inlined both by GCC and Clang ([example](https://godbolt.org/z/Tc8cT5vT1)). The machine code generated for equality comparison and `std::fpclassify` versions is even exactly the same. Aside from that, invoking a library function should not matter anyway because we are calling library functions all over the place. I doubt there are significant performance ramifications due to an additional call.\n\nI don\u0027t mind reverting the check and using the equality comparison. However, I believe it makes sense preemptively avoiding bogus warnings (if we don\u0027t turn the warning on, someone else will) by using existing functionality. Clearly, there\u0027s a reason why the functionality exists in the first place.",
      "parentUuid": "5673677b_404d1325",
      "revId": "f967d34d86bd1b85962a32e70cf362b599f8abe4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd942ed8_bf213662",
        "filename": "internal/ceres/jet_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 5002
      },
      "writtenOn": "2025-05-17T14:44:40Z",
      "side": 1,
      "message": "now that I look at it, same question as elsewhere, why not compare to zero directly?",
      "range": {
        "startLine": 108,
        "startChar": 25,
        "endLine": 108,
        "endChar": 26
      },
      "revId": "f967d34d86bd1b85962a32e70cf362b599f8abe4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85953c63_4ba376ab",
        "filename": "internal/ceres/polynomial.cc",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 5002
      },
      "writtenOn": "2025-05-17T14:44:40Z",
      "side": 1,
      "message": "why not a straight comparison to zero? why do we need a library call here?",
      "range": {
        "startLine": 76,
        "startChar": 15,
        "endLine": 76,
        "endChar": 25
      },
      "fixSuggestions": [
        {
          "fixId": "486a6712_ba9f32a9",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "internal/ceres/polynomial.cc",
              "range": {
                "startLine": 76,
                "startChar": 0,
                "endLine": 77,
                "endChar": 0
              },
              "replacement": "      if (col_norm !\u003d 0.0) {\n"
            }
          ]
        }
      ],
      "revId": "f967d34d86bd1b85962a32e70cf362b599f8abe4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ad478bff_768a7b93",
        "filename": "internal/ceres/test_util.cc",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 5002
      },
      "writtenOn": "2025-05-17T14:44:40Z",
      "side": 1,
      "message": "The existing code already checks equality against zero, why would we change this a function call to fpclassify?",
      "range": {
        "startLine": 68,
        "startChar": 21,
        "endLine": 68,
        "endChar": 22
      },
      "fixSuggestions": [
        {
          "fixId": "7e7a3a73_eb7a2c40",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "internal/ceres/test_util.cc",
              "range": {
                "startLine": 68,
                "startChar": 0,
                "endLine": 69,
                "endChar": 0
              },
              "replacement": "  if (x \u003d\u003d 0.0 || y \u003d\u003d 0.0) {\n"
            }
          ]
        }
      ],
      "revId": "f967d34d86bd1b85962a32e70cf362b599f8abe4",
      "serverId": "cdcfcfbe-2044-3b1f-b5d4-da77ad542329"
    }
  ]
}